{"ast":null,"code":"import { supabase } from '../config';\nclass SubjectService {\n  async createSubject(subjectData) {\n    try {\n      // Validar que los campos requeridos estén presentes\n      if (!subjectData.name || !subjectData.description || !subjectData.code || !subjectData.professor_id) {\n        throw new Error('Faltan campos requeridos');\n      }\n\n      // Verificar que el profesor exista en auth.users\n      const {\n        data: {\n          user\n        },\n        error: userError\n      } = await supabase.auth.getUser(subjectData.professor_id);\n      if (userError || !user) {\n        throw new Error('El profesor no existe en el sistema');\n      }\n\n      // Preparar los datos para la inserción\n      const subjectToInsert = {\n        name: subjectData.name,\n        description: subjectData.description,\n        code: subjectData.code,\n        professor_id: subjectData.professor_id,\n        created_at: new Date().toISOString()\n      };\n      console.log('Intentando crear asignatura con datos:', subjectToInsert);\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').insert([subjectToInsert]).select();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        if (error.code === '23503') {\n          // Código de error para violación de clave foránea\n          throw new Error('Error: El profesor no está registrado correctamente en el sistema');\n        }\n        throw error;\n      }\n      return data[0];\n    } catch (error) {\n      console.error('Error al crear la asignatura:', error);\n      throw error;\n    }\n  }\n  async getSubjects(professorId) {\n    try {\n      if (!professorId) {\n        throw new Error('ID del profesor no proporcionado');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').select('*').eq('professor_id', professorId).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Error al obtener las asignaturas:', error);\n      throw error;\n    }\n  }\n  async getSubjectById(subjectId) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').select('*').eq('id', subjectId).single();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Error al obtener la asignatura:', error);\n      throw error;\n    }\n  }\n  async updateSubject(subjectId, subjectData) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').update({\n        name: subjectData.name,\n        description: subjectData.description,\n        code: subjectData.code\n      }).eq('id', subjectId).select();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return data[0];\n    } catch (error) {\n      console.error('Error al actualizar la asignatura:', error);\n      throw error;\n    }\n  }\n  async deleteSubject(subjectId) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        error\n      } = await supabase.from('subjects').delete().eq('id', subjectId);\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return true;\n    } catch (error) {\n      console.error('Error al eliminar la asignatura:', error);\n      throw error;\n    }\n  }\n  async getEnrolledStudents(subjectId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('enrollments').select(`\n                    student_id,\n                    students:profiles (\n                        id,\n                        full_name,\n                        email\n                    )\n                `).eq('subject_id', subjectId);\n      if (error) throw error;\n      return data.map(enrollment => enrollment.students);\n    } catch (error) {\n      console.error('Error al obtener los estudiantes inscritos:', error);\n      throw error;\n    }\n  }\n}\nexport const subjectService = new SubjectService();","map":{"version":3,"names":["supabase","SubjectService","createSubject","subjectData","name","description","code","professor_id","Error","data","user","error","userError","auth","getUser","subjectToInsert","created_at","Date","toISOString","console","log","from","insert","select","getSubjects","professorId","eq","order","ascending","getSubjectById","subjectId","single","updateSubject","update","deleteSubject","delete","getEnrolledStudents","map","enrollment","students","subjectService"],"sources":["C:/Users/bruno/Documents/UNIR/TFE/EDUIA/src/services/subject.service.js"],"sourcesContent":["import { supabase } from '../config';\r\n\r\nclass SubjectService {\r\n    async createSubject(subjectData) {\r\n        try {\r\n            // Validar que los campos requeridos estén presentes\r\n            if (!subjectData.name || !subjectData.description || !subjectData.code || !subjectData.professor_id) {\r\n                throw new Error('Faltan campos requeridos');\r\n            }\r\n\r\n            // Verificar que el profesor exista en auth.users\r\n            const { data: { user }, error: userError } = await supabase.auth.getUser(subjectData.professor_id);\r\n            \r\n            if (userError || !user) {\r\n                throw new Error('El profesor no existe en el sistema');\r\n            }\r\n\r\n            // Preparar los datos para la inserción\r\n            const subjectToInsert = {\r\n                name: subjectData.name,\r\n                description: subjectData.description,\r\n                code: subjectData.code,\r\n                professor_id: subjectData.professor_id,\r\n                created_at: new Date().toISOString()\r\n            };\r\n\r\n            console.log('Intentando crear asignatura con datos:', subjectToInsert);\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .insert([subjectToInsert])\r\n                .select();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                if (error.code === '23503') { // Código de error para violación de clave foránea\r\n                    throw new Error('Error: El profesor no está registrado correctamente en el sistema');\r\n                }\r\n                throw error;\r\n            }\r\n\r\n            return data[0];\r\n        } catch (error) {\r\n            console.error('Error al crear la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getSubjects(professorId) {\r\n        try {\r\n            if (!professorId) {\r\n                throw new Error('ID del profesor no proporcionado');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .select('*')\r\n                .eq('professor_id', professorId)\r\n                .order('created_at', { ascending: false });\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error al obtener las asignaturas:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getSubjectById(subjectId) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .select('*')\r\n                .eq('id', subjectId)\r\n                .single();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error al obtener la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async updateSubject(subjectId, subjectData) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .update({\r\n                    name: subjectData.name,\r\n                    description: subjectData.description,\r\n                    code: subjectData.code\r\n                })\r\n                .eq('id', subjectId)\r\n                .select();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return data[0];\r\n        } catch (error) {\r\n            console.error('Error al actualizar la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async deleteSubject(subjectId) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { error } = await supabase\r\n                .from('subjects')\r\n                .delete()\r\n                .eq('id', subjectId);\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error al eliminar la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getEnrolledStudents(subjectId) {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('enrollments')\r\n                .select(`\r\n                    student_id,\r\n                    students:profiles (\r\n                        id,\r\n                        full_name,\r\n                        email\r\n                    )\r\n                `)\r\n                .eq('subject_id', subjectId);\r\n\r\n            if (error) throw error;\r\n            return data.map(enrollment => enrollment.students);\r\n        } catch (error) {\r\n            console.error('Error al obtener los estudiantes inscritos:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nexport const subjectService = new SubjectService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}