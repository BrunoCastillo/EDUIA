{"ast":null,"code":"import { supabase } from '../config';\nclass SubjectService {\n  async getSubjects(professorId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').select('*').eq('professor_id', professorId).order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error al obtener asignaturas:', error);\n      throw error;\n    }\n  }\n  async createSubject(subjectData) {\n    try {\n      // Validar datos requeridos\n      if (!subjectData.name || !subjectData.professor_id) {\n        throw new Error('Faltan datos requeridos');\n      }\n\n      // Generar código automáticamente\n      const code = this.generateCode(subjectData.name);\n\n      // Verificar usuario autenticado\n      const {\n        data: {\n          user\n        },\n        error: authError\n      } = await supabase.auth.getUser();\n      if (authError) throw authError;\n      if (!user) {\n        throw new Error('Usuario no autenticado');\n      }\n\n      // Verificar que el usuario autenticado coincida con el professor_id\n      if (user.id !== subjectData.professor_id) {\n        throw new Error('No tienes permiso para crear asignaturas para otros profesores');\n      }\n\n      // Intentar crear la asignatura\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').insert([{\n        name: subjectData.name,\n        code: code,\n        professor_id: subjectData.professor_id\n      }]).select().single();\n      if (error) {\n        console.error('Error al crear asignatura:', error);\n        if (error.code === '42501') {\n          throw new Error('No tienes permiso para crear asignaturas');\n        }\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Error en createSubject:', error);\n      throw error;\n    }\n  }\n  generateCode(name) {\n    // Tomar las primeras tres letras de cada palabra y convertirlas a mayúsculas\n    return name.split(' ').map(word => word.substring(0, 3).toUpperCase()).join('');\n  }\n  async deleteSubject(subjectId, professorId) {\n    try {\n      // Verificar usuario autenticado\n      const {\n        data: {\n          user\n        },\n        error: authError\n      } = await supabase.auth.getUser();\n      if (authError) throw authError;\n      if (!user) {\n        throw new Error('Usuario no autenticado');\n      }\n\n      // Verificar que el usuario autenticado coincida con el professor_id\n      if (user.id !== professorId) {\n        throw new Error('No tienes permiso para eliminar asignaturas de otros profesores');\n      }\n      const {\n        error\n      } = await supabase.from('subjects').delete().eq('id', subjectId).eq('professor_id', professorId);\n      if (error) {\n        console.error('Error al eliminar asignatura:', error);\n        if (error.code === '42501') {\n          throw new Error('No tienes permiso para eliminar asignaturas');\n        }\n        throw error;\n      }\n      return true;\n    } catch (error) {\n      console.error('Error en deleteSubject:', error);\n      throw error;\n    }\n  }\n  async getSubjectById(subjectId) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').select('*').eq('id', subjectId).single();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Error al obtener la asignatura:', error);\n      throw error;\n    }\n  }\n  async updateSubject(subjectId, subjectData) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').update({\n        name: subjectData.name,\n        description: subjectData.description,\n        code: subjectData.code\n      }).eq('id', subjectId).select();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return data[0];\n    } catch (error) {\n      console.error('Error al actualizar la asignatura:', error);\n      throw error;\n    }\n  }\n  async getEnrolledStudents(subjectId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('enrollments').select(`\n                    student_id,\n                    students:profiles (\n                        id,\n                        full_name,\n                        email\n                    )\n                `).eq('subject_id', subjectId);\n      if (error) throw error;\n      return data.map(enrollment => enrollment.students);\n    } catch (error) {\n      console.error('Error al obtener los estudiantes inscritos:', error);\n      throw error;\n    }\n  }\n}\nexport const subjectService = new SubjectService();","map":{"version":3,"names":["supabase","SubjectService","getSubjects","professorId","data","error","from","select","eq","order","ascending","console","createSubject","subjectData","name","professor_id","Error","code","generateCode","user","authError","auth","getUser","id","insert","single","split","map","word","substring","toUpperCase","join","deleteSubject","subjectId","delete","getSubjectById","updateSubject","update","description","getEnrolledStudents","enrollment","students","subjectService"],"sources":["C:/Users/bruno/Documents/UNIR/TFE/EDUIA/src/services/subject.service.js"],"sourcesContent":["import { supabase } from '../config';\r\n\r\nclass SubjectService {\r\n    async getSubjects(professorId) {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .select('*')\r\n                .eq('professor_id', professorId)\r\n                .order('created_at', { ascending: false });\r\n\r\n            if (error) throw error;\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error al obtener asignaturas:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async createSubject(subjectData) {\r\n        try {\r\n            // Validar datos requeridos\r\n            if (!subjectData.name || !subjectData.professor_id) {\r\n                throw new Error('Faltan datos requeridos');\r\n            }\r\n\r\n            // Generar código automáticamente\r\n            const code = this.generateCode(subjectData.name);\r\n\r\n            // Verificar usuario autenticado\r\n            const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n            if (authError) throw authError;\r\n\r\n            if (!user) {\r\n                throw new Error('Usuario no autenticado');\r\n            }\r\n\r\n            // Verificar que el usuario autenticado coincida con el professor_id\r\n            if (user.id !== subjectData.professor_id) {\r\n                throw new Error('No tienes permiso para crear asignaturas para otros profesores');\r\n            }\r\n\r\n            // Intentar crear la asignatura\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .insert([\r\n                    {\r\n                        name: subjectData.name,\r\n                        code: code,\r\n                        professor_id: subjectData.professor_id\r\n                    }\r\n                ])\r\n                .select()\r\n                .single();\r\n\r\n            if (error) {\r\n                console.error('Error al crear asignatura:', error);\r\n                if (error.code === '42501') {\r\n                    throw new Error('No tienes permiso para crear asignaturas');\r\n                }\r\n                throw error;\r\n            }\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error en createSubject:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    generateCode(name) {\r\n        // Tomar las primeras tres letras de cada palabra y convertirlas a mayúsculas\r\n        return name\r\n            .split(' ')\r\n            .map(word => word.substring(0, 3).toUpperCase())\r\n            .join('');\r\n    }\r\n\r\n    async deleteSubject(subjectId, professorId) {\r\n        try {\r\n            // Verificar usuario autenticado\r\n            const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n            if (authError) throw authError;\r\n\r\n            if (!user) {\r\n                throw new Error('Usuario no autenticado');\r\n            }\r\n\r\n            // Verificar que el usuario autenticado coincida con el professor_id\r\n            if (user.id !== professorId) {\r\n                throw new Error('No tienes permiso para eliminar asignaturas de otros profesores');\r\n            }\r\n\r\n            const { error } = await supabase\r\n                .from('subjects')\r\n                .delete()\r\n                .eq('id', subjectId)\r\n                .eq('professor_id', professorId);\r\n\r\n            if (error) {\r\n                console.error('Error al eliminar asignatura:', error);\r\n                if (error.code === '42501') {\r\n                    throw new Error('No tienes permiso para eliminar asignaturas');\r\n                }\r\n                throw error;\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error en deleteSubject:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getSubjectById(subjectId) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .select('*')\r\n                .eq('id', subjectId)\r\n                .single();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error al obtener la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async updateSubject(subjectId, subjectData) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .update({\r\n                    name: subjectData.name,\r\n                    description: subjectData.description,\r\n                    code: subjectData.code\r\n                })\r\n                .eq('id', subjectId)\r\n                .select();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return data[0];\r\n        } catch (error) {\r\n            console.error('Error al actualizar la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getEnrolledStudents(subjectId) {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('enrollments')\r\n                .select(`\r\n                    student_id,\r\n                    students:profiles (\r\n                        id,\r\n                        full_name,\r\n                        email\r\n                    )\r\n                `)\r\n                .eq('subject_id', subjectId);\r\n\r\n            if (error) throw error;\r\n            return data.map(enrollment => enrollment.students);\r\n        } catch (error) {\r\n            console.error('Error al obtener los estudiantes inscritos:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nexport const subjectService = new SubjectService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}