{"ast":null,"code":"import { supabase } from '../config';\nclass SubjectService {\n  async createSubject(subjectData) {\n    try {\n      // Validar que los campos requeridos estén presentes\n      if (!subjectData.name || !subjectData.description || !subjectData.code || !subjectData.professor_id) {\n        throw new Error('Faltan campos requeridos');\n      }\n\n      // Verificar que el profesor exista\n      const {\n        data: professor,\n        error: professorError\n      } = await supabase.from('profiles').select('id').eq('id', subjectData.professor_id).single();\n      if (professorError || !professor) {\n        throw new Error('El profesor no existe en el sistema');\n      }\n\n      // Preparar los datos para la inserción\n      const subjectToInsert = {\n        name: subjectData.name,\n        description: subjectData.description,\n        code: subjectData.code,\n        professor_id: subjectData.professor_id,\n        created_at: new Date().toISOString()\n      };\n      console.log('Intentando crear asignatura con datos:', subjectToInsert);\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').insert([subjectToInsert]).select();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        if (error.code === '23503') {\n          // Código de error para violación de clave foránea\n          throw new Error('Error: El profesor no está registrado correctamente en el sistema');\n        }\n        throw error;\n      }\n      return data[0];\n    } catch (error) {\n      console.error('Error al crear la asignatura:', error);\n      throw error;\n    }\n  }\n  async getSubjects(professorId) {\n    try {\n      if (!professorId) {\n        throw new Error('ID del profesor no proporcionado');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').select('*').eq('professor_id', professorId).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Error al obtener las asignaturas:', error);\n      throw error;\n    }\n  }\n  async getSubjectById(subjectId) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').select('*').eq('id', subjectId).single();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Error al obtener la asignatura:', error);\n      throw error;\n    }\n  }\n  async updateSubject(subjectId, subjectData) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').update({\n        name: subjectData.name,\n        description: subjectData.description,\n        code: subjectData.code\n      }).eq('id', subjectId).select();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return data[0];\n    } catch (error) {\n      console.error('Error al actualizar la asignatura:', error);\n      throw error;\n    }\n  }\n  async deleteSubject(subjectId) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        error\n      } = await supabase.from('subjects').delete().eq('id', subjectId);\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return true;\n    } catch (error) {\n      console.error('Error al eliminar la asignatura:', error);\n      throw error;\n    }\n  }\n  async getEnrolledStudents(subjectId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('enrollments').select(`\n                    student_id,\n                    students:profiles (\n                        id,\n                        full_name,\n                        email\n                    )\n                `).eq('subject_id', subjectId);\n      if (error) throw error;\n      return data.map(enrollment => enrollment.students);\n    } catch (error) {\n      console.error('Error al obtener los estudiantes inscritos:', error);\n      throw error;\n    }\n  }\n}\nexport const subjectService = new SubjectService();","map":{"version":3,"names":["supabase","SubjectService","createSubject","subjectData","name","description","code","professor_id","Error","data","professor","error","professorError","from","select","eq","single","subjectToInsert","created_at","Date","toISOString","console","log","insert","getSubjects","professorId","order","ascending","getSubjectById","subjectId","updateSubject","update","deleteSubject","delete","getEnrolledStudents","map","enrollment","students","subjectService"],"sources":["C:/Users/bruno/Documents/UNIR/TFE/EDUIA/src/services/subject.service.js"],"sourcesContent":["import { supabase } from '../config';\r\n\r\nclass SubjectService {\r\n    async createSubject(subjectData) {\r\n        try {\r\n            // Validar que los campos requeridos estén presentes\r\n            if (!subjectData.name || !subjectData.description || !subjectData.code || !subjectData.professor_id) {\r\n                throw new Error('Faltan campos requeridos');\r\n            }\r\n\r\n            // Verificar que el profesor exista\r\n            const { data: professor, error: professorError } = await supabase\r\n                .from('profiles')\r\n                .select('id')\r\n                .eq('id', subjectData.professor_id)\r\n                .single();\r\n\r\n            if (professorError || !professor) {\r\n                throw new Error('El profesor no existe en el sistema');\r\n            }\r\n\r\n            // Preparar los datos para la inserción\r\n            const subjectToInsert = {\r\n                name: subjectData.name,\r\n                description: subjectData.description,\r\n                code: subjectData.code,\r\n                professor_id: subjectData.professor_id,\r\n                created_at: new Date().toISOString()\r\n            };\r\n\r\n            console.log('Intentando crear asignatura con datos:', subjectToInsert);\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .insert([subjectToInsert])\r\n                .select();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                if (error.code === '23503') { // Código de error para violación de clave foránea\r\n                    throw new Error('Error: El profesor no está registrado correctamente en el sistema');\r\n                }\r\n                throw error;\r\n            }\r\n\r\n            return data[0];\r\n        } catch (error) {\r\n            console.error('Error al crear la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getSubjects(professorId) {\r\n        try {\r\n            if (!professorId) {\r\n                throw new Error('ID del profesor no proporcionado');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .select('*')\r\n                .eq('professor_id', professorId)\r\n                .order('created_at', { ascending: false });\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error al obtener las asignaturas:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getSubjectById(subjectId) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .select('*')\r\n                .eq('id', subjectId)\r\n                .single();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error al obtener la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async updateSubject(subjectId, subjectData) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .update({\r\n                    name: subjectData.name,\r\n                    description: subjectData.description,\r\n                    code: subjectData.code\r\n                })\r\n                .eq('id', subjectId)\r\n                .select();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return data[0];\r\n        } catch (error) {\r\n            console.error('Error al actualizar la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async deleteSubject(subjectId) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { error } = await supabase\r\n                .from('subjects')\r\n                .delete()\r\n                .eq('id', subjectId);\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error al eliminar la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getEnrolledStudents(subjectId) {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('enrollments')\r\n                .select(`\r\n                    student_id,\r\n                    students:profiles (\r\n                        id,\r\n                        full_name,\r\n                        email\r\n                    )\r\n                `)\r\n                .eq('subject_id', subjectId);\r\n\r\n            if (error) throw error;\r\n            return data.map(enrollment => enrollment.students);\r\n        } catch (error) {\r\n            console.error('Error al obtener los estudiantes inscritos:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nexport const subjectService = new SubjectService(); "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,WAAW;AAEpC,MAAMC,cAAc,CAAC;EACjB,MAAMC,aAAaA,CAACC,WAAW,EAAE;IAC7B,IAAI;MACA;MACA,IAAI,CAACA,WAAW,CAACC,IAAI,IAAI,CAACD,WAAW,CAACE,WAAW,IAAI,CAACF,WAAW,CAACG,IAAI,IAAI,CAACH,WAAW,CAACI,YAAY,EAAE;QACjG,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC/C;;MAEA;MACA,MAAM;QAAEC,IAAI,EAAEC,SAAS;QAAEC,KAAK,EAAEC;MAAe,CAAC,GAAG,MAAMZ,QAAQ,CAC5Da,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,IAAI,CAAC,CACZC,EAAE,CAAC,IAAI,EAAEZ,WAAW,CAACI,YAAY,CAAC,CAClCS,MAAM,CAAC,CAAC;MAEb,IAAIJ,cAAc,IAAI,CAACF,SAAS,EAAE;QAC9B,MAAM,IAAIF,KAAK,CAAC,qCAAqC,CAAC;MAC1D;;MAEA;MACA,MAAMS,eAAe,GAAG;QACpBb,IAAI,EAAED,WAAW,CAACC,IAAI;QACtBC,WAAW,EAAEF,WAAW,CAACE,WAAW;QACpCC,IAAI,EAAEH,WAAW,CAACG,IAAI;QACtBC,YAAY,EAAEJ,WAAW,CAACI,YAAY;QACtCW,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACvC,CAAC;MAEDC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEL,eAAe,CAAC;MAEtE,MAAM;QAAER,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAMX,QAAQ,CACjCa,IAAI,CAAC,UAAU,CAAC,CAChBU,MAAM,CAAC,CAACN,eAAe,CAAC,CAAC,CACzBH,MAAM,CAAC,CAAC;MAEb,IAAIH,KAAK,EAAE;QACPU,OAAO,CAACV,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C,IAAIA,KAAK,CAACL,IAAI,KAAK,OAAO,EAAE;UAAE;UAC1B,MAAM,IAAIE,KAAK,CAAC,mEAAmE,CAAC;QACxF;QACA,MAAMG,KAAK;MACf;MAEA,OAAOF,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZU,OAAO,CAACV,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACf;EACJ;EAEA,MAAMa,WAAWA,CAACC,WAAW,EAAE;IAC3B,IAAI;MACA,IAAI,CAACA,WAAW,EAAE;QACd,MAAM,IAAIjB,KAAK,CAAC,kCAAkC,CAAC;MACvD;MAEA,MAAM;QAAEC,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAMX,QAAQ,CACjCa,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,cAAc,EAAEU,WAAW,CAAC,CAC/BC,KAAK,CAAC,YAAY,EAAE;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC;MAE9C,IAAIhB,KAAK,EAAE;QACPU,OAAO,CAACV,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C,MAAMA,KAAK;MACf;MAEA,OAAOF,IAAI;IACf,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZU,OAAO,CAACV,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACf;EACJ;EAEA,MAAMiB,cAAcA,CAACC,SAAS,EAAE;IAC5B,IAAI;MACA,IAAI,CAACA,SAAS,EAAE;QACZ,MAAM,IAAIrB,KAAK,CAAC,sCAAsC,CAAC;MAC3D;MAEA,MAAM;QAAEC,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAMX,QAAQ,CACjCa,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,EAAEc,SAAS,CAAC,CACnBb,MAAM,CAAC,CAAC;MAEb,IAAIL,KAAK,EAAE;QACPU,OAAO,CAACV,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C,MAAMA,KAAK;MACf;MAEA,OAAOF,IAAI;IACf,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZU,OAAO,CAACV,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACf;EACJ;EAEA,MAAMmB,aAAaA,CAACD,SAAS,EAAE1B,WAAW,EAAE;IACxC,IAAI;MACA,IAAI,CAAC0B,SAAS,EAAE;QACZ,MAAM,IAAIrB,KAAK,CAAC,sCAAsC,CAAC;MAC3D;MAEA,MAAM;QAAEC,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAMX,QAAQ,CACjCa,IAAI,CAAC,UAAU,CAAC,CAChBkB,MAAM,CAAC;QACJ3B,IAAI,EAAED,WAAW,CAACC,IAAI;QACtBC,WAAW,EAAEF,WAAW,CAACE,WAAW;QACpCC,IAAI,EAAEH,WAAW,CAACG;MACtB,CAAC,CAAC,CACDS,EAAE,CAAC,IAAI,EAAEc,SAAS,CAAC,CACnBf,MAAM,CAAC,CAAC;MAEb,IAAIH,KAAK,EAAE;QACPU,OAAO,CAACV,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C,MAAMA,KAAK;MACf;MAEA,OAAOF,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZU,OAAO,CAACV,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACf;EACJ;EAEA,MAAMqB,aAAaA,CAACH,SAAS,EAAE;IAC3B,IAAI;MACA,IAAI,CAACA,SAAS,EAAE;QACZ,MAAM,IAAIrB,KAAK,CAAC,sCAAsC,CAAC;MAC3D;MAEA,MAAM;QAAEG;MAAM,CAAC,GAAG,MAAMX,QAAQ,CAC3Ba,IAAI,CAAC,UAAU,CAAC,CAChBoB,MAAM,CAAC,CAAC,CACRlB,EAAE,CAAC,IAAI,EAAEc,SAAS,CAAC;MAExB,IAAIlB,KAAK,EAAE;QACPU,OAAO,CAACV,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C,MAAMA,KAAK;MACf;MAEA,OAAO,IAAI;IACf,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZU,OAAO,CAACV,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACf;EACJ;EAEA,MAAMuB,mBAAmBA,CAACL,SAAS,EAAE;IACjC,IAAI;MACA,MAAM;QAAEpB,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAMX,QAAQ,CACjCa,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,CAAC,CACDC,EAAE,CAAC,YAAY,EAAEc,SAAS,CAAC;MAEhC,IAAIlB,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOF,IAAI,CAAC0B,GAAG,CAACC,UAAU,IAAIA,UAAU,CAACC,QAAQ,CAAC;IACtD,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACZU,OAAO,CAACV,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnE,MAAMA,KAAK;IACf;EACJ;AACJ;AAEA,OAAO,MAAM2B,cAAc,GAAG,IAAIrC,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}