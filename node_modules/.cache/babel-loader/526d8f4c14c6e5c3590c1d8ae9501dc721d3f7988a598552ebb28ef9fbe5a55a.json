{"ast":null,"code":"import { supabase } from '../config';\nclass SubjectService {\n  async createSubject(subjectData) {\n    try {\n      // Validar que los campos requeridos estén presentes\n      if (!subjectData.name || !subjectData.code || !subjectData.professor_id) {\n        throw new Error('Faltan campos requeridos');\n      }\n\n      // Obtener el usuario actual\n      const {\n        data: {\n          user\n        },\n        error: userError\n      } = await supabase.auth.getUser();\n      if (userError || !user) {\n        console.error('Error al obtener usuario:', userError);\n        throw new Error('No hay un usuario autenticado');\n      }\n      console.log('Usuario autenticado:', user);\n\n      // Verificar que el ID del profesor coincida con el usuario actual\n      if (user.id !== subjectData.professor_id) {\n        console.error('ID de profesor no coincide:', {\n          userId: user.id,\n          professorId: subjectData.professor_id\n        });\n        throw new Error('No tienes permiso para crear asignaturas para otro profesor');\n      }\n\n      // Preparar los datos para la inserción\n      const subjectToInsert = {\n        name: subjectData.name,\n        code: subjectData.code,\n        professor_id: subjectData.professor_id,\n        created_at: new Date().toISOString()\n      };\n      console.log('Intentando crear asignatura con datos:', subjectToInsert);\n\n      // Primero verificar si la tabla existe y sus permisos\n      const {\n        data: tableInfo,\n        error: tableError\n      } = await supabase.from('subjects').select('count').limit(1);\n      if (tableError) {\n        console.error('Error al verificar tabla:', tableError);\n        throw new Error('Error al acceder a la tabla de asignaturas');\n      }\n\n      // Intentar crear la asignatura\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').insert([subjectToInsert]).select();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        if (error.code === '23503') {\n          throw new Error('Error: No tienes permiso para crear asignaturas');\n        } else if (error.code === '42P01') {\n          throw new Error('Error: La tabla de asignaturas no existe');\n        } else if (error.code === '42501') {\n          throw new Error('Error: No tienes permisos suficientes');\n        } else {\n          throw new Error(`Error al crear la asignatura: ${error.message}`);\n        }\n      }\n      if (!data || data.length === 0) {\n        throw new Error('No se pudo crear la asignatura');\n      }\n      return data[0];\n    } catch (error) {\n      console.error('Error al crear la asignatura:', error);\n      throw error;\n    }\n  }\n  async getSubjects(professorId) {\n    try {\n      if (!professorId) {\n        throw new Error('ID del profesor no proporcionado');\n      }\n\n      // Obtener el usuario actual\n      const {\n        data: {\n          user\n        },\n        error: userError\n      } = await supabase.auth.getUser();\n      if (userError || !user) {\n        console.error('Error al obtener usuario:', userError);\n        throw new Error('No hay un usuario autenticado');\n      }\n\n      // Verificar que el ID del profesor coincida con el usuario actual\n      if (user.id !== professorId) {\n        console.error('ID de profesor no coincide:', {\n          userId: user.id,\n          professorId: professorId\n        });\n        throw new Error('No tienes permiso para ver las asignaturas de otro profesor');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').select('*').eq('professor_id', professorId).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('Error de Supabase:', error);\n        if (error.code === '42P01') {\n          throw new Error('Error: La tabla de asignaturas no existe');\n        } else if (error.code === '42501') {\n          throw new Error('Error: No tienes permisos suficientes');\n        } else {\n          throw new Error(`Error al obtener las asignaturas: ${error.message}`);\n        }\n      }\n      return data || [];\n    } catch (error) {\n      console.error('Error al obtener las asignaturas:', error);\n      throw error;\n    }\n  }\n  async getSubjectById(subjectId) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').select('*').eq('id', subjectId).single();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Error al obtener la asignatura:', error);\n      throw error;\n    }\n  }\n  async updateSubject(subjectId, subjectData) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').update({\n        name: subjectData.name,\n        description: subjectData.description,\n        code: subjectData.code\n      }).eq('id', subjectId).select();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return data[0];\n    } catch (error) {\n      console.error('Error al actualizar la asignatura:', error);\n      throw error;\n    }\n  }\n  async deleteSubject(subjectId) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        error\n      } = await supabase.from('subjects').delete().eq('id', subjectId);\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return true;\n    } catch (error) {\n      console.error('Error al eliminar la asignatura:', error);\n      throw error;\n    }\n  }\n  async getEnrolledStudents(subjectId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('enrollments').select(`\n                    student_id,\n                    students:profiles (\n                        id,\n                        full_name,\n                        email\n                    )\n                `).eq('subject_id', subjectId);\n      if (error) throw error;\n      return data.map(enrollment => enrollment.students);\n    } catch (error) {\n      console.error('Error al obtener los estudiantes inscritos:', error);\n      throw error;\n    }\n  }\n}\nexport const subjectService = new SubjectService();","map":{"version":3,"names":["supabase","SubjectService","createSubject","subjectData","name","code","professor_id","Error","data","user","error","userError","auth","getUser","console","log","id","userId","professorId","subjectToInsert","created_at","Date","toISOString","tableInfo","tableError","from","select","limit","insert","message","length","getSubjects","eq","order","ascending","getSubjectById","subjectId","single","updateSubject","update","description","deleteSubject","delete","getEnrolledStudents","map","enrollment","students","subjectService"],"sources":["C:/Users/bruno/Documents/UNIR/TFE/EDUIA/src/services/subject.service.js"],"sourcesContent":["import { supabase } from '../config';\r\n\r\nclass SubjectService {\r\n    async createSubject(subjectData) {\r\n        try {\r\n            // Validar que los campos requeridos estén presentes\r\n            if (!subjectData.name || !subjectData.code || !subjectData.professor_id) {\r\n                throw new Error('Faltan campos requeridos');\r\n            }\r\n\r\n            // Obtener el usuario actual\r\n            const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n            \r\n            if (userError || !user) {\r\n                console.error('Error al obtener usuario:', userError);\r\n                throw new Error('No hay un usuario autenticado');\r\n            }\r\n\r\n            console.log('Usuario autenticado:', user);\r\n\r\n            // Verificar que el ID del profesor coincida con el usuario actual\r\n            if (user.id !== subjectData.professor_id) {\r\n                console.error('ID de profesor no coincide:', { \r\n                    userId: user.id, \r\n                    professorId: subjectData.professor_id \r\n                });\r\n                throw new Error('No tienes permiso para crear asignaturas para otro profesor');\r\n            }\r\n\r\n            // Preparar los datos para la inserción\r\n            const subjectToInsert = {\r\n                name: subjectData.name,\r\n                code: subjectData.code,\r\n                professor_id: subjectData.professor_id,\r\n                created_at: new Date().toISOString()\r\n            };\r\n\r\n            console.log('Intentando crear asignatura con datos:', subjectToInsert);\r\n\r\n            // Primero verificar si la tabla existe y sus permisos\r\n            const { data: tableInfo, error: tableError } = await supabase\r\n                .from('subjects')\r\n                .select('count')\r\n                .limit(1);\r\n\r\n            if (tableError) {\r\n                console.error('Error al verificar tabla:', tableError);\r\n                throw new Error('Error al acceder a la tabla de asignaturas');\r\n            }\r\n\r\n            // Intentar crear la asignatura\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .insert([subjectToInsert])\r\n                .select();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                if (error.code === '23503') {\r\n                    throw new Error('Error: No tienes permiso para crear asignaturas');\r\n                } else if (error.code === '42P01') {\r\n                    throw new Error('Error: La tabla de asignaturas no existe');\r\n                } else if (error.code === '42501') {\r\n                    throw new Error('Error: No tienes permisos suficientes');\r\n                } else {\r\n                    throw new Error(`Error al crear la asignatura: ${error.message}`);\r\n                }\r\n            }\r\n\r\n            if (!data || data.length === 0) {\r\n                throw new Error('No se pudo crear la asignatura');\r\n            }\r\n\r\n            return data[0];\r\n        } catch (error) {\r\n            console.error('Error al crear la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getSubjects(professorId) {\r\n        try {\r\n            if (!professorId) {\r\n                throw new Error('ID del profesor no proporcionado');\r\n            }\r\n\r\n            // Obtener el usuario actual\r\n            const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n            \r\n            if (userError || !user) {\r\n                console.error('Error al obtener usuario:', userError);\r\n                throw new Error('No hay un usuario autenticado');\r\n            }\r\n\r\n            // Verificar que el ID del profesor coincida con el usuario actual\r\n            if (user.id !== professorId) {\r\n                console.error('ID de profesor no coincide:', { \r\n                    userId: user.id, \r\n                    professorId: professorId \r\n                });\r\n                throw new Error('No tienes permiso para ver las asignaturas de otro profesor');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .select('*')\r\n                .eq('professor_id', professorId)\r\n                .order('created_at', { ascending: false });\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                if (error.code === '42P01') {\r\n                    throw new Error('Error: La tabla de asignaturas no existe');\r\n                } else if (error.code === '42501') {\r\n                    throw new Error('Error: No tienes permisos suficientes');\r\n                } else {\r\n                    throw new Error(`Error al obtener las asignaturas: ${error.message}`);\r\n                }\r\n            }\r\n\r\n            return data || [];\r\n        } catch (error) {\r\n            console.error('Error al obtener las asignaturas:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getSubjectById(subjectId) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .select('*')\r\n                .eq('id', subjectId)\r\n                .single();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error al obtener la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async updateSubject(subjectId, subjectData) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .update({\r\n                    name: subjectData.name,\r\n                    description: subjectData.description,\r\n                    code: subjectData.code\r\n                })\r\n                .eq('id', subjectId)\r\n                .select();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return data[0];\r\n        } catch (error) {\r\n            console.error('Error al actualizar la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async deleteSubject(subjectId) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { error } = await supabase\r\n                .from('subjects')\r\n                .delete()\r\n                .eq('id', subjectId);\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error al eliminar la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getEnrolledStudents(subjectId) {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('enrollments')\r\n                .select(`\r\n                    student_id,\r\n                    students:profiles (\r\n                        id,\r\n                        full_name,\r\n                        email\r\n                    )\r\n                `)\r\n                .eq('subject_id', subjectId);\r\n\r\n            if (error) throw error;\r\n            return data.map(enrollment => enrollment.students);\r\n        } catch (error) {\r\n            console.error('Error al obtener los estudiantes inscritos:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nexport const subjectService = new SubjectService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}