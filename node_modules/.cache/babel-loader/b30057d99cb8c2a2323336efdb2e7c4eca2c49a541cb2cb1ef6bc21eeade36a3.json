{"ast":null,"code":"import { supabase } from '../config/supabaseClient';\nexport const authService = {\n  async login(email, password) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  async register(email, password, fullName, role) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            full_name: fullName,\n            role: role\n          }\n        }\n      });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  async logout() {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n    } catch (error) {\n      throw error;\n    }\n  },\n  async getCurrentUser() {\n    try {\n      const {\n        data: {\n          user\n        },\n        error\n      } = await supabase.auth.getUser();\n      if (error) throw error;\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  },\n  async resetPassword(email) {\n    try {\n      const {\n        error\n      } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`\n      });\n      if (error) throw error;\n    } catch (error) {\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["supabase","authService","login","email","password","data","error","auth","signInWithPassword","register","fullName","role","signUp","options","full_name","logout","signOut","getCurrentUser","user","getUser","resetPassword","resetPasswordForEmail","redirectTo","window","location","origin"],"sources":["C:/Users/bruno/Documents/UNIR/TFE/EDUIA/src/services/auth.service.js"],"sourcesContent":["import { supabase } from '../config/supabaseClient';\r\n\r\nexport const authService = {\r\n    async login(email, password) {\r\n        try {\r\n            const { data, error } = await supabase.auth.signInWithPassword({\r\n                email,\r\n                password\r\n            });\r\n            if (error) throw error;\r\n            return data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    async register(email, password, fullName, role) {\r\n        try {\r\n            const { data, error } = await supabase.auth.signUp({\r\n                email,\r\n                password,\r\n                options: {\r\n                    data: {\r\n                        full_name: fullName,\r\n                        role: role\r\n                    }\r\n                }\r\n            });\r\n            if (error) throw error;\r\n            return data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    async logout() {\r\n        try {\r\n            const { error } = await supabase.auth.signOut();\r\n            if (error) throw error;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    async getCurrentUser() {\r\n        try {\r\n            const { data: { user }, error } = await supabase.auth.getUser();\r\n            if (error) throw error;\r\n            return user;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    async resetPassword(email) {\r\n        try {\r\n            const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n                redirectTo: `${window.location.origin}/reset-password`,\r\n            });\r\n            if (error) throw error;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,0BAA0B;AAEnD,OAAO,MAAMC,WAAW,GAAG;EACvB,MAAMC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACzB,IAAI;MACA,MAAM;QAAEC,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAACC,kBAAkB,CAAC;QAC3DL,KAAK;QACLC;MACJ,CAAC,CAAC;MACF,IAAIE,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOD,IAAI;IACf,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ,CAAC;EAED,MAAMG,QAAQA,CAACN,KAAK,EAAEC,QAAQ,EAAEM,QAAQ,EAAEC,IAAI,EAAE;IAC5C,IAAI;MACA,MAAM;QAAEN,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAACK,MAAM,CAAC;QAC/CT,KAAK;QACLC,QAAQ;QACRS,OAAO,EAAE;UACLR,IAAI,EAAE;YACFS,SAAS,EAAEJ,QAAQ;YACnBC,IAAI,EAAEA;UACV;QACJ;MACJ,CAAC,CAAC;MACF,IAAIL,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOD,IAAI;IACf,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ,CAAC;EAED,MAAMS,MAAMA,CAAA,EAAG;IACX,IAAI;MACA,MAAM;QAAET;MAAM,CAAC,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAACS,OAAO,CAAC,CAAC;MAC/C,IAAIV,KAAK,EAAE,MAAMA,KAAK;IAC1B,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ,CAAC;EAED,MAAMW,cAAcA,CAAA,EAAG;IACnB,IAAI;MACA,MAAM;QAAEZ,IAAI,EAAE;UAAEa;QAAK,CAAC;QAAEZ;MAAM,CAAC,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAACY,OAAO,CAAC,CAAC;MAC/D,IAAIb,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOY,IAAI;IACf,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ,CAAC;EAED,MAAMc,aAAaA,CAACjB,KAAK,EAAE;IACvB,IAAI;MACA,MAAM;QAAEG;MAAM,CAAC,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAACc,qBAAqB,CAAClB,KAAK,EAAE;QAC/DmB,UAAU,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;MACzC,CAAC,CAAC;MACF,IAAInB,KAAK,EAAE,MAAMA,KAAK;IAC1B,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}