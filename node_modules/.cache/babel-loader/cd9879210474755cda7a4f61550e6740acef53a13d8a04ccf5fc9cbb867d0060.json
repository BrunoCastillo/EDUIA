{"ast":null,"code":"import { config } from '../config';\nclass DeepSeekService {\n  constructor() {\n    this.apiUrl = 'https://api.deepseek.com/v1/chat/completions';\n    this.apiKey = process.env.REACT_APP_DEEPSEEK_API_KEY;\n\n    // Debug: Mostrar todas las variables de entorno\n    console.log('Variables de entorno disponibles:', {\n      DEEPSEEK_KEY: process.env.REACT_APP_DEEPSEEK_API_KEY,\n      NODE_ENV: process.env.NODE_ENV,\n      // Mostrar todas las variables que empiezan con REACT_APP_\n      ...Object.keys(process.env).filter(key => key.startsWith('REACT_APP_')).reduce((obj, key) => ({\n        ...obj,\n        [key]: process.env[key]\n      }), {})\n    });\n    if (!this.apiKey) {\n      console.error('Error: La API key de DeepSeek no está configurada.');\n      throw new Error('Por favor, configura la API key de DeepSeek en el archivo .env');\n    }\n  }\n  async sendMessage(message) {\n    try {\n      console.log('Enviando mensaje a DeepSeek...');\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          messages: [{\n            role: 'user',\n            content: message\n          }],\n          model: 'deepseek-chat',\n          temperature: 0.7,\n          max_tokens: 1000\n        })\n      });\n      if (!response.ok) {\n        var _errorData$error;\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Error en la respuesta de DeepSeek:', errorData);\n        throw new Error(`Error en la API: ${response.status} - ${((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || 'Error desconocido'}`);\n      }\n      const data = await response.json();\n      console.log('Respuesta recibida de DeepSeek:', data);\n      return data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error al enviar mensaje a DeepSeek:', error);\n      throw new Error('No se pudo obtener una respuesta del asistente. Por favor, intenta de nuevo.');\n    }\n  }\n}\nexport const deepseekService = new DeepSeekService();","map":{"version":3,"names":["config","DeepSeekService","constructor","apiUrl","apiKey","process","env","REACT_APP_DEEPSEEK_API_KEY","console","log","DEEPSEEK_KEY","NODE_ENV","Object","keys","filter","key","startsWith","reduce","obj","error","Error","sendMessage","message","response","fetch","method","headers","body","JSON","stringify","messages","role","content","model","temperature","max_tokens","ok","_errorData$error","errorData","json","catch","status","data","choices","deepseekService"],"sources":["C:/Users/bruno/Documents/UNIR/TFE/EDUIA/src/services/deepseek.service.js"],"sourcesContent":["import { config } from '../config';\r\n\r\nclass DeepSeekService {\r\n    constructor() {\r\n        this.apiUrl = 'https://api.deepseek.com/v1/chat/completions';\r\n        this.apiKey = process.env.REACT_APP_DEEPSEEK_API_KEY;\r\n        \r\n        // Debug: Mostrar todas las variables de entorno\r\n        console.log('Variables de entorno disponibles:', {\r\n            DEEPSEEK_KEY: process.env.REACT_APP_DEEPSEEK_API_KEY,\r\n            NODE_ENV: process.env.NODE_ENV,\r\n            // Mostrar todas las variables que empiezan con REACT_APP_\r\n            ...Object.keys(process.env)\r\n                .filter(key => key.startsWith('REACT_APP_'))\r\n                .reduce((obj, key) => ({ ...obj, [key]: process.env[key] }), {})\r\n        });\r\n        \r\n        if (!this.apiKey) {\r\n            console.error('Error: La API key de DeepSeek no está configurada.');\r\n            throw new Error('Por favor, configura la API key de DeepSeek en el archivo .env');\r\n        }\r\n    }\r\n\r\n    async sendMessage(message) {\r\n        try {\r\n            console.log('Enviando mensaje a DeepSeek...');\r\n            const response = await fetch(this.apiUrl, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${this.apiKey}`\r\n                },\r\n                body: JSON.stringify({\r\n                    messages: [{\r\n                        role: 'user',\r\n                        content: message\r\n                    }],\r\n                    model: 'deepseek-chat',\r\n                    temperature: 0.7,\r\n                    max_tokens: 1000\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                console.error('Error en la respuesta de DeepSeek:', errorData);\r\n                throw new Error(`Error en la API: ${response.status} - ${errorData.error?.message || 'Error desconocido'}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log('Respuesta recibida de DeepSeek:', data);\r\n            return data.choices[0].message.content;\r\n        } catch (error) {\r\n            console.error('Error al enviar mensaje a DeepSeek:', error);\r\n            throw new Error('No se pudo obtener una respuesta del asistente. Por favor, intenta de nuevo.');\r\n        }\r\n    }\r\n}\r\n\r\nexport const deepseekService = new DeepSeekService(); "],"mappings":"AAAA,SAASA,MAAM,QAAQ,WAAW;AAElC,MAAMC,eAAe,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,MAAM,GAAG,8CAA8C;IAC5D,IAAI,CAACC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;;IAEpD;IACAC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE;MAC7CC,YAAY,EAAEL,OAAO,CAACC,GAAG,CAACC,0BAA0B;MACpDI,QAAQ,EAAEN,OAAO,CAACC,GAAG,CAACK,QAAQ;MAC9B;MACA,GAAGC,MAAM,CAACC,IAAI,CAACR,OAAO,CAACC,GAAG,CAAC,CACtBQ,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,YAAY,CAAC,CAAC,CAC3CC,MAAM,CAAC,CAACC,GAAG,EAAEH,GAAG,MAAM;QAAE,GAAGG,GAAG;QAAE,CAACH,GAAG,GAAGV,OAAO,CAACC,GAAG,CAACS,GAAG;MAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACvE,CAAC,CAAC;IAEF,IAAI,CAAC,IAAI,CAACX,MAAM,EAAE;MACdI,OAAO,CAACW,KAAK,CAAC,oDAAoD,CAAC;MACnE,MAAM,IAAIC,KAAK,CAAC,gEAAgE,CAAC;IACrF;EACJ;EAEA,MAAMC,WAAWA,CAACC,OAAO,EAAE;IACvB,IAAI;MACAd,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7C,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,IAAI,CAACrB,MAAM,EAAE;QACtCsB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAU,IAAI,CAACtB,MAAM;QAC1C,CAAC;QACDuB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBC,QAAQ,EAAE,CAAC;YACPC,IAAI,EAAE,MAAM;YACZC,OAAO,EAAEV;UACb,CAAC,CAAC;UACFW,KAAK,EAAE,eAAe;UACtBC,WAAW,EAAE,GAAG;UAChBC,UAAU,EAAE;QAChB,CAAC;MACL,CAAC,CAAC;MAEF,IAAI,CAACZ,QAAQ,CAACa,EAAE,EAAE;QAAA,IAAAC,gBAAA;QACd,MAAMC,SAAS,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzDhC,OAAO,CAACW,KAAK,CAAC,oCAAoC,EAAEmB,SAAS,CAAC;QAC9D,MAAM,IAAIlB,KAAK,CAAC,oBAAoBG,QAAQ,CAACkB,MAAM,MAAM,EAAAJ,gBAAA,GAAAC,SAAS,CAACnB,KAAK,cAAAkB,gBAAA,uBAAfA,gBAAA,CAAiBf,OAAO,KAAI,mBAAmB,EAAE,CAAC;MAC/G;MAEA,MAAMoB,IAAI,GAAG,MAAMnB,QAAQ,CAACgB,IAAI,CAAC,CAAC;MAClC/B,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEiC,IAAI,CAAC;MACpD,OAAOA,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACrB,OAAO,CAACU,OAAO;IAC1C,CAAC,CAAC,OAAOb,KAAK,EAAE;MACZX,OAAO,CAACW,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAM,IAAIC,KAAK,CAAC,8EAA8E,CAAC;IACnG;EACJ;AACJ;AAEA,OAAO,MAAMwB,eAAe,GAAG,IAAI3C,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}