{"ast":null,"code":"import { supabase } from '../config';\nclass SubjectService {\n  async createSubject(subjectData) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').insert([{\n        name: subjectData.name,\n        description: subjectData.description,\n        code: subjectData.code,\n        professor_id: subjectData.professor_id\n      }]).select();\n      if (error) throw error;\n      return data[0];\n    } catch (error) {\n      console.error('Error al crear la asignatura:', error);\n      throw error;\n    }\n  }\n  async getSubjects(professorId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').select('*').eq('professor_id', professorId).order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error al obtener las asignaturas:', error);\n      throw error;\n    }\n  }\n  async getSubjectById(subjectId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').select('*').eq('id', subjectId).single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error al obtener la asignatura:', error);\n      throw error;\n    }\n  }\n  async updateSubject(subjectId, subjectData) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').update({\n        name: subjectData.name,\n        description: subjectData.description,\n        code: subjectData.code\n      }).eq('id', subjectId).select();\n      if (error) throw error;\n      return data[0];\n    } catch (error) {\n      console.error('Error al actualizar la asignatura:', error);\n      throw error;\n    }\n  }\n  async deleteSubject(subjectId) {\n    try {\n      const {\n        error\n      } = await supabase.from('subjects').delete().eq('id', subjectId);\n      if (error) throw error;\n      return true;\n    } catch (error) {\n      console.error('Error al eliminar la asignatura:', error);\n      throw error;\n    }\n  }\n  async getEnrolledStudents(subjectId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('enrollments').select(`\n                    student_id,\n                    students:profiles (\n                        id,\n                        full_name,\n                        email\n                    )\n                `).eq('subject_id', subjectId);\n      if (error) throw error;\n      return data.map(enrollment => enrollment.students);\n    } catch (error) {\n      console.error('Error al obtener los estudiantes inscritos:', error);\n      throw error;\n    }\n  }\n}\nexport const subjectService = new SubjectService();","map":{"version":3,"names":["supabase","SubjectService","createSubject","subjectData","data","error","from","insert","name","description","code","professor_id","select","console","getSubjects","professorId","eq","order","ascending","getSubjectById","subjectId","single","updateSubject","update","deleteSubject","delete","getEnrolledStudents","map","enrollment","students","subjectService"],"sources":["C:/Users/bruno/Documents/UNIR/TFE/EDUIA/src/services/subject.service.js"],"sourcesContent":["import { supabase } from '../config';\r\n\r\nclass SubjectService {\r\n    async createSubject(subjectData) {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .insert([{\r\n                    name: subjectData.name,\r\n                    description: subjectData.description,\r\n                    code: subjectData.code,\r\n                    professor_id: subjectData.professor_id\r\n                }])\r\n                .select();\r\n\r\n            if (error) throw error;\r\n            return data[0];\r\n        } catch (error) {\r\n            console.error('Error al crear la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getSubjects(professorId) {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .select('*')\r\n                .eq('professor_id', professorId)\r\n                .order('created_at', { ascending: false });\r\n\r\n            if (error) throw error;\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error al obtener las asignaturas:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getSubjectById(subjectId) {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .select('*')\r\n                .eq('id', subjectId)\r\n                .single();\r\n\r\n            if (error) throw error;\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error al obtener la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async updateSubject(subjectId, subjectData) {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .update({\r\n                    name: subjectData.name,\r\n                    description: subjectData.description,\r\n                    code: subjectData.code\r\n                })\r\n                .eq('id', subjectId)\r\n                .select();\r\n\r\n            if (error) throw error;\r\n            return data[0];\r\n        } catch (error) {\r\n            console.error('Error al actualizar la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async deleteSubject(subjectId) {\r\n        try {\r\n            const { error } = await supabase\r\n                .from('subjects')\r\n                .delete()\r\n                .eq('id', subjectId);\r\n\r\n            if (error) throw error;\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error al eliminar la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getEnrolledStudents(subjectId) {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('enrollments')\r\n                .select(`\r\n                    student_id,\r\n                    students:profiles (\r\n                        id,\r\n                        full_name,\r\n                        email\r\n                    )\r\n                `)\r\n                .eq('subject_id', subjectId);\r\n\r\n            if (error) throw error;\r\n            return data.map(enrollment => enrollment.students);\r\n        } catch (error) {\r\n            console.error('Error al obtener los estudiantes inscritos:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nexport const subjectService = new SubjectService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}