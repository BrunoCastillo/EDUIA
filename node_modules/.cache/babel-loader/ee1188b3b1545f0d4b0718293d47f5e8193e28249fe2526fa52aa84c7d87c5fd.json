{"ast":null,"code":"import { supabase } from '../config';\nclass SubjectService {\n  async getSubjects(professorId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').select(`\n                    *,\n                    syllabus (\n                        file_url,\n                        file_name\n                    )\n                `).eq('professor_id', professorId).order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error al obtener asignaturas:', error);\n      throw error;\n    }\n  }\n  async createSubject(subjectData) {\n    try {\n      // Validar datos requeridos\n      if (!subjectData.name || !subjectData.professor_id) {\n        throw new Error('Faltan datos requeridos');\n      }\n\n      // Generar código automáticamente\n      const code = this.generateCode(subjectData.name);\n\n      // Verificar usuario autenticado\n      const {\n        data: {\n          user\n        },\n        error: authError\n      } = await supabase.auth.getUser();\n      if (authError) throw authError;\n      if (!user) {\n        throw new Error('Usuario no autenticado');\n      }\n      console.log('Usuario autenticado:', user);\n\n      // Verificar que el usuario autenticado coincida con el professor_id\n      if (user.id !== subjectData.professor_id) {\n        throw new Error('No tienes permiso para crear asignaturas para otros profesores');\n      }\n\n      // Verificar si el usuario existe en nuestra tabla users\n      const {\n        data: existingUserById,\n        error: userErrorById\n      } = await supabase.from('users').select('*').eq('id', user.id).single();\n      let userIdToUse = user.id;\n      if (userErrorById || !existingUserById) {\n        // Buscar por email antes de crear\n        const {\n          data: existingUserByEmail,\n          error: userErrorByEmail\n        } = await supabase.from('users').select('*').eq('email', user.email).single();\n        if (existingUserByEmail) {\n          // Si existe por email, usar ese usuario\n          userIdToUse = existingUserByEmail.id;\n          console.log('Usuario ya existe por email, usando id:', userIdToUse);\n        } else {\n          var _user$user_metadata;\n          // Crear el usuario en nuestra tabla\n          const newUser = {\n            id: user.id,\n            email: user.email,\n            full_name: ((_user$user_metadata = user.user_metadata) === null || _user$user_metadata === void 0 ? void 0 : _user$user_metadata.full_name) || user.email,\n            role: 'professor'\n          };\n          console.log('Intentando crear usuario con datos:', newUser);\n          const {\n            data: insertedUser,\n            error: insertError\n          } = await supabase.from('users').insert([newUser]).select().single();\n          if (insertError) {\n            console.error('Error al crear usuario:', insertError);\n            throw new Error(`Error al sincronizar el usuario: ${insertError.message}`);\n          }\n          userIdToUse = insertedUser.id;\n          console.log('Usuario creado exitosamente:', insertedUser);\n        }\n      }\n\n      // Verificar nuevamente que el usuario existe\n      const {\n        data: finalUser,\n        error: finalUserError\n      } = await supabase.from('users').select('id').eq('id', userIdToUse).single();\n      if (finalUserError || !finalUser) {\n        throw new Error('No se pudo verificar la existencia del usuario');\n      }\n      console.log('Usuario verificado antes de crear asignatura:', finalUser);\n\n      // Intentar crear la asignatura\n      const subjectToCreate = {\n        name: subjectData.name,\n        code: code,\n        professor_id: subjectData.professor_id\n      };\n      console.log('Intentando crear asignatura con datos:', subjectToCreate);\n      const {\n        data: subject,\n        error: subjectError\n      } = await supabase.from('subjects').insert([subjectToCreate]).select().single();\n      if (subjectError) {\n        console.error('Error al crear asignatura:', subjectError);\n        if (subjectError.code === '42501') {\n          throw new Error('No tienes permiso para crear asignaturas');\n        }\n        throw subjectError;\n      }\n      console.log('Asignatura creada exitosamente:', subject);\n\n      // Si hay una URL de sílabo, actualizar la asignatura\n      if (subjectData.syllabus_url) {\n        const {\n          error: syllabusError\n        } = await supabase.from('syllabus').insert([{\n          subject_id: subject.id,\n          file_url: subjectData.syllabus_url,\n          file_name: 'Sílabo',\n          file_path: subjectData.syllabus_url\n        }]);\n        if (syllabusError) {\n          console.error('Error al guardar el sílabo:', syllabusError);\n        }\n      }\n      return subject;\n    } catch (error) {\n      console.error('Error en createSubject:', error);\n      throw error;\n    }\n  }\n  generateCode(name) {\n    // Tomar las primeras tres letras de cada palabra y convertirlas a mayúsculas\n    return name.split(' ').map(word => word.substring(0, 3).toUpperCase()).join('');\n  }\n  async deleteSubject(subjectId, professorId) {\n    try {\n      console.log('Intentando eliminar asignatura:', {\n        subjectId,\n        professorId\n      });\n\n      // Verificar usuario autenticado\n      const {\n        data: {\n          user\n        },\n        error: authError\n      } = await supabase.auth.getUser();\n      if (authError) throw authError;\n      if (!user) {\n        throw new Error('Usuario no autenticado');\n      }\n      console.log('Usuario autenticado:', user);\n\n      // Verificar que el usuario existe en nuestra tabla users\n      const {\n        data: existingUser,\n        error: userError\n      } = await supabase.from('users').select('*').eq('id', user.id).single();\n      console.log('Usuario en tabla users:', existingUser);\n      if (userError || !existingUser) {\n        throw new Error('Usuario no encontrado en el sistema');\n      }\n\n      // Verificar que el usuario es profesor\n      if (existingUser.role !== 'professor') {\n        throw new Error('Solo los profesores pueden eliminar asignaturas');\n      }\n\n      // Verificar que el usuario es el propietario de la asignatura\n      const {\n        data: subject,\n        error: subjectError\n      } = await supabase.from('subjects').select('professor_id').eq('id', subjectId).single();\n      console.log('Asignatura encontrada:', subject);\n      if (subjectError || !subject) {\n        throw new Error('Asignatura no encontrada');\n      }\n      if (subject.professor_id !== user.id) {\n        throw new Error('No tienes permiso para eliminar esta asignatura');\n      }\n\n      // Eliminar la asignatura\n      const {\n        error: deleteError\n      } = await supabase.from('subjects').delete().eq('id', subjectId);\n      if (deleteError) {\n        console.error('Error al eliminar asignatura:', deleteError);\n        if (deleteError.code === '42501') {\n          throw new Error('No tienes permiso para eliminar asignaturas');\n        }\n        throw deleteError;\n      }\n      console.log('Asignatura eliminada exitosamente');\n      return true;\n    } catch (error) {\n      console.error('Error en deleteSubject:', error);\n      throw error;\n    }\n  }\n  async getSubjectById(subjectId) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').select('*').eq('id', subjectId).single();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Error al obtener la asignatura:', error);\n      throw error;\n    }\n  }\n  async updateSubject(subjectId, subjectData) {\n    try {\n      if (!subjectId) {\n        throw new Error('ID de la asignatura no proporcionado');\n      }\n      const {\n        data,\n        error\n      } = await supabase.from('subjects').update({\n        name: subjectData.name,\n        updated_at: new Date().toISOString()\n      }).eq('id', subjectId).select().single();\n      if (error) {\n        console.error('Error de Supabase:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Error al actualizar la asignatura:', error);\n      throw error;\n    }\n  }\n  async getEnrolledStudents(subjectId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('enrollments').select(`\n                    student_id,\n                    students:profiles (\n                        id,\n                        full_name,\n                        email\n                    )\n                `).eq('subject_id', subjectId);\n      if (error) throw error;\n      return data.map(enrollment => enrollment.students);\n    } catch (error) {\n      console.error('Error al obtener los estudiantes inscritos:', error);\n      throw error;\n    }\n  }\n}\nexport const subjectService = new SubjectService();","map":{"version":3,"names":["supabase","SubjectService","getSubjects","professorId","data","error","from","select","eq","order","ascending","console","createSubject","subjectData","name","professor_id","Error","code","generateCode","user","authError","auth","getUser","log","id","existingUserById","userErrorById","single","userIdToUse","existingUserByEmail","userErrorByEmail","email","_user$user_metadata","newUser","full_name","user_metadata","role","insertedUser","insertError","insert","message","finalUser","finalUserError","subjectToCreate","subject","subjectError","syllabus_url","syllabusError","subject_id","file_url","file_name","file_path","split","map","word","substring","toUpperCase","join","deleteSubject","subjectId","existingUser","userError","deleteError","delete","getSubjectById","updateSubject","update","updated_at","Date","toISOString","getEnrolledStudents","enrollment","students","subjectService"],"sources":["C:/Users/bruno/Documents/UNIR/TFE/EDUIA/src/services/subject.service.js"],"sourcesContent":["import { supabase } from '../config';\r\n\r\nclass SubjectService {\r\n    async getSubjects(professorId) {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .select(`\r\n                    *,\r\n                    syllabus (\r\n                        file_url,\r\n                        file_name\r\n                    )\r\n                `)\r\n                .eq('professor_id', professorId)\r\n                .order('created_at', { ascending: false });\r\n\r\n            if (error) throw error;\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error al obtener asignaturas:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async createSubject(subjectData) {\r\n        try {\r\n            // Validar datos requeridos\r\n            if (!subjectData.name || !subjectData.professor_id) {\r\n                throw new Error('Faltan datos requeridos');\r\n            }\r\n\r\n            // Generar código automáticamente\r\n            const code = this.generateCode(subjectData.name);\r\n\r\n            // Verificar usuario autenticado\r\n            const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n            if (authError) throw authError;\r\n\r\n            if (!user) {\r\n                throw new Error('Usuario no autenticado');\r\n            }\r\n\r\n            console.log('Usuario autenticado:', user);\r\n\r\n            // Verificar que el usuario autenticado coincida con el professor_id\r\n            if (user.id !== subjectData.professor_id) {\r\n                throw new Error('No tienes permiso para crear asignaturas para otros profesores');\r\n            }\r\n\r\n            // Verificar si el usuario existe en nuestra tabla users\r\n            const { data: existingUserById, error: userErrorById } = await supabase\r\n                .from('users')\r\n                .select('*')\r\n                .eq('id', user.id)\r\n                .single();\r\n\r\n            let userIdToUse = user.id;\r\n\r\n            if (userErrorById || !existingUserById) {\r\n                // Buscar por email antes de crear\r\n                const { data: existingUserByEmail, error: userErrorByEmail } = await supabase\r\n                    .from('users')\r\n                    .select('*')\r\n                    .eq('email', user.email)\r\n                    .single();\r\n\r\n                if (existingUserByEmail) {\r\n                    // Si existe por email, usar ese usuario\r\n                    userIdToUse = existingUserByEmail.id;\r\n                    console.log('Usuario ya existe por email, usando id:', userIdToUse);\r\n                } else {\r\n                    // Crear el usuario en nuestra tabla\r\n                    const newUser = {\r\n                        id: user.id,\r\n                        email: user.email,\r\n                        full_name: user.user_metadata?.full_name || user.email,\r\n                        role: 'professor'\r\n                    };\r\n                    console.log('Intentando crear usuario con datos:', newUser);\r\n                    const { data: insertedUser, error: insertError } = await supabase\r\n                        .from('users')\r\n                        .insert([newUser])\r\n                        .select()\r\n                        .single();\r\n                    if (insertError) {\r\n                        console.error('Error al crear usuario:', insertError);\r\n                        throw new Error(`Error al sincronizar el usuario: ${insertError.message}`);\r\n                    }\r\n                    userIdToUse = insertedUser.id;\r\n                    console.log('Usuario creado exitosamente:', insertedUser);\r\n                }\r\n            }\r\n\r\n            // Verificar nuevamente que el usuario existe\r\n            const { data: finalUser, error: finalUserError } = await supabase\r\n                .from('users')\r\n                .select('id')\r\n                .eq('id', userIdToUse)\r\n                .single();\r\n\r\n            if (finalUserError || !finalUser) {\r\n                throw new Error('No se pudo verificar la existencia del usuario');\r\n            }\r\n\r\n            console.log('Usuario verificado antes de crear asignatura:', finalUser);\r\n\r\n            // Intentar crear la asignatura\r\n            const subjectToCreate = {\r\n                name: subjectData.name,\r\n                code: code,\r\n                professor_id: subjectData.professor_id\r\n            };\r\n\r\n            console.log('Intentando crear asignatura con datos:', subjectToCreate);\r\n\r\n            const { data: subject, error: subjectError } = await supabase\r\n                .from('subjects')\r\n                .insert([subjectToCreate])\r\n                .select()\r\n                .single();\r\n\r\n            if (subjectError) {\r\n                console.error('Error al crear asignatura:', subjectError);\r\n                if (subjectError.code === '42501') {\r\n                    throw new Error('No tienes permiso para crear asignaturas');\r\n                }\r\n                throw subjectError;\r\n            }\r\n\r\n            console.log('Asignatura creada exitosamente:', subject);\r\n\r\n            // Si hay una URL de sílabo, actualizar la asignatura\r\n            if (subjectData.syllabus_url) {\r\n                const { error: syllabusError } = await supabase\r\n                    .from('syllabus')\r\n                    .insert([\r\n                        {\r\n                            subject_id: subject.id,\r\n                            file_url: subjectData.syllabus_url,\r\n                            file_name: 'Sílabo',\r\n                            file_path: subjectData.syllabus_url\r\n                        }\r\n                    ]);\r\n\r\n                if (syllabusError) {\r\n                    console.error('Error al guardar el sílabo:', syllabusError);\r\n                }\r\n            }\r\n\r\n            return subject;\r\n        } catch (error) {\r\n            console.error('Error en createSubject:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    generateCode(name) {\r\n        // Tomar las primeras tres letras de cada palabra y convertirlas a mayúsculas\r\n        return name\r\n            .split(' ')\r\n            .map(word => word.substring(0, 3).toUpperCase())\r\n            .join('');\r\n    }\r\n\r\n    async deleteSubject(subjectId, professorId) {\r\n        try {\r\n            console.log('Intentando eliminar asignatura:', { subjectId, professorId });\r\n\r\n            // Verificar usuario autenticado\r\n            const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n            if (authError) throw authError;\r\n\r\n            if (!user) {\r\n                throw new Error('Usuario no autenticado');\r\n            }\r\n\r\n            console.log('Usuario autenticado:', user);\r\n\r\n            // Verificar que el usuario existe en nuestra tabla users\r\n            const { data: existingUser, error: userError } = await supabase\r\n                .from('users')\r\n                .select('*')\r\n                .eq('id', user.id)\r\n                .single();\r\n\r\n            console.log('Usuario en tabla users:', existingUser);\r\n\r\n            if (userError || !existingUser) {\r\n                throw new Error('Usuario no encontrado en el sistema');\r\n            }\r\n\r\n            // Verificar que el usuario es profesor\r\n            if (existingUser.role !== 'professor') {\r\n                throw new Error('Solo los profesores pueden eliminar asignaturas');\r\n            }\r\n\r\n            // Verificar que el usuario es el propietario de la asignatura\r\n            const { data: subject, error: subjectError } = await supabase\r\n                .from('subjects')\r\n                .select('professor_id')\r\n                .eq('id', subjectId)\r\n                .single();\r\n\r\n            console.log('Asignatura encontrada:', subject);\r\n\r\n            if (subjectError || !subject) {\r\n                throw new Error('Asignatura no encontrada');\r\n            }\r\n\r\n            if (subject.professor_id !== user.id) {\r\n                throw new Error('No tienes permiso para eliminar esta asignatura');\r\n            }\r\n\r\n            // Eliminar la asignatura\r\n            const { error: deleteError } = await supabase\r\n                .from('subjects')\r\n                .delete()\r\n                .eq('id', subjectId);\r\n\r\n            if (deleteError) {\r\n                console.error('Error al eliminar asignatura:', deleteError);\r\n                if (deleteError.code === '42501') {\r\n                    throw new Error('No tienes permiso para eliminar asignaturas');\r\n                }\r\n                throw deleteError;\r\n            }\r\n\r\n            console.log('Asignatura eliminada exitosamente');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error en deleteSubject:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getSubjectById(subjectId) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .select('*')\r\n                .eq('id', subjectId)\r\n                .single();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error al obtener la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async updateSubject(subjectId, subjectData) {\r\n        try {\r\n            if (!subjectId) {\r\n                throw new Error('ID de la asignatura no proporcionado');\r\n            }\r\n\r\n            const { data, error } = await supabase\r\n                .from('subjects')\r\n                .update({\r\n                    name: subjectData.name,\r\n                    updated_at: new Date().toISOString()\r\n                })\r\n                .eq('id', subjectId)\r\n                .select()\r\n                .single();\r\n\r\n            if (error) {\r\n                console.error('Error de Supabase:', error);\r\n                throw error;\r\n            }\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error al actualizar la asignatura:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getEnrolledStudents(subjectId) {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('enrollments')\r\n                .select(`\r\n                    student_id,\r\n                    students:profiles (\r\n                        id,\r\n                        full_name,\r\n                        email\r\n                    )\r\n                `)\r\n                .eq('subject_id', subjectId);\r\n\r\n            if (error) throw error;\r\n            return data.map(enrollment => enrollment.students);\r\n        } catch (error) {\r\n            console.error('Error al obtener los estudiantes inscritos:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nexport const subjectService = new SubjectService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}